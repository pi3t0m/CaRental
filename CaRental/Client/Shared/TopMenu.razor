@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject ICarService Carservice
@inject NavigationManager NavigationManager
@implements IDisposable

<BlazoredTypeahead SearchMethod="@SearchCar"
                   TValue="Car"
                   TItem="Car"
                   Value="selectedCar"
                   ValueChanged="HandleSearch"
                   ValueExpression="@(() => selectedCar)"
                   placeholder="Search...">
    <SelectedTemplate>
        @context.Brand
    </SelectedTemplate>
    <ResultTemplate>
        @context.Brand
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any cars found.
    </NotFoundTemplate>
</BlazoredTypeahead>

<a href="cart" class="btn btn-info">
    <i calss="oi oi-cart"></i>
    Cart
    <span class="badge badge-pill badge-light">@GetCarCount()</span>
</a>

@code {
    private Car selectedCar;

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private int GetCarCount()
    {
        var cart = LocalStorage.GetItem<List<CarVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }

    private void HandleSearch(Car car)
    {
        if (car == null) return;
        selectedCar = car;
        NavigationManager.NavigateTo($"car/{selectedCar.Id}");
    }

    private async Task<IEnumerable<Car>> SearchCar(string searchText)
    {
        var response = await Carservice.SearchCars(searchText);
        return response;
    }
}
