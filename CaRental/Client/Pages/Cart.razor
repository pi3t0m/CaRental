@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Your Cart</PageTitle>
<h3>Your Cart</h3>

@if(cartCars == null || cartCars.Count == 0)
{
    <span>@message</span>
}
else if (orderPlaced)
{
    <span>Thank you for your order! You can check your orders <a href="orders">here</a>.</span>
}
else
{
    <div>
        @foreach (var car in cartCars)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@car.Image" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/car/@car.CarId">@car.Brand</a></h5>
                    <span>@car.Edition</span><br/>
                    <button class="btn-delete" @onclick="@(() => 
                        RemoveCarFromCart(car.CarId, car.EditionId))">Delete</button>
                </div>
                <div class="cart-car-price">$@car.Price</div>
            </div>
        }
        <div class="cart-car-price">
            Total (@cartCars.Count): $@cartCars.Sum(car => @car.Price)
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
}

@code {
    List<CartCarResponseDTO> cartCars = null;
    string message = "loading cart..";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveCarFromCart(int carId, int editionId)
    {
        await CartService.RemoveCarFromCart(carId, editionId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartCars = await CartService.GetCartCars();
        if (cartCars == null || cartCars.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
